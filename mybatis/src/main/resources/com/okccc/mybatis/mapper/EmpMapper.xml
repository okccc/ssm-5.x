<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.okccc.mybatis.mapper.EmpMapper">
    <!--
        表中字段名和实体类中属性名不一致,如何处理映射关系
        1.在mybatis核心配置文件添加全局设置,自动将下划线映射成驼峰,比如emp_id:empId、emp_name:empName
        2.使用resultMap自定义映射关系(常用)
        id: 处理主键字段和属性的映射关系
        result: 处理普通字段和属性的映射关系
        association: 处理多对一的映射关系,即实体类类型的属性
        collection: 处理一对多的映射关系,即集合类型的属性
        一对多和多对一都可以使用分步查询,可以延迟加载,减少内存消耗
    -->

    <resultMap id="empResultMap" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <!-- 方式一：级联处理 -->
        <!--        <result column="dept_id" property="dept.deptId"/>-->
        <!--        <result column="dept_name" property="dept.deptName"/>-->
        <!-- 方式二：association -->
        <association property="dept" javaType="Dept">
            <id column="dept_id" property="deptId"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>
    <!-- Emp getEmpByEmpId(@Param("empId") Integer empId); -->
    <select id="getEmpByEmpId" resultMap="empResultMap">
        select * from t_emp left join t_dept on t_emp.dept_id = t_dept.dept_id where t_emp.emp_id = #{empId}
    </select>

    <resultMap id="empResultMapWithStep" type="Emp">
        <id column="emp_id" property="empId"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <!--
            方式三：分步查询(推荐)
            property：需要处理映射关系的属性名
            column：当前查询stepOne的某个字段名作为分步查询stepTwo的查询条件
            select：分步查询sql的唯一标识,即namespace.sqlId,也就是mapper接口.方法名
            fetchType：核心配置文件全局配置了自动延迟加载,映射文件可以手动设置开关 eager(立即加载)/lazy(延迟加载)
        -->
        <association property="dept" column="dept_id" fetchType="lazy"
                     select="com.okccc.mybatis.mapper.DeptMapper.getEmpByEmpIdWithStepTwo"/>
    </resultMap>
    <!-- Emp getEmpByEmpIdWithStepOne(@Param("empId") Integer empId); -->
    <select id="getEmpByEmpIdWithStepOne" resultMap="empResultMapWithStep">
        select * from t_emp where emp_id = #{empId}
    </select>

    <!-- List<Emp> getDeptByDeptIdWithStepTwo(@Param("deptId") Integer deptId); -->
    <select id="getDeptByDeptIdWithStepTwo" resultType="Emp">
        select * from t_emp where dept_id = #{deptId}
    </select>

    <!--
        mybatis动态拼接sql
        if标签：条件成立就拼接到sql中
        where标签：自动处理where和and关键字
        trim标签：通过prefix和suffix添加前后缀,prefixOverrides和suffixOverrides去掉前后缀
        choose标签：when和otherwise相当于java的if...else if...else,其中when至少一个otherwise最多一个
        sql片段：可以记录一段常用sql,在需要的地方通过include标签引用
        <sql id="empColumns">
            emp_id,emp_name,age,gender,dept_id
        </sql>
        <include refid="empColumns"></include>
    -->

    <!-- sql片段 -->
    <sql id="empColumns">
        emp_id,emp_name,age,gender,dept_id
    </sql>

    <!-- List<Emp> getEmpByCondition(Emp emp); -->
    <select id="getEmpByCondition01" resultType="Emp">
        select * from t_emp where 1=1
        <if test="empName != null and empName != ''">
            and emp_name = #{empName}
        </if>
        <if test="age != null and age != ''">
            and age = #{age}
        </if>
        <if test="gender != null and gender != ''">
            and gender = #{gender}
        </if>
    </select>
    <select id="getEmpByCondition" resultType="Emp">
        select <include refid="empColumns"/> from t_emp
        <where>
            <if test="empName != null and empName != ''">
                and emp_name = #{empName}
            </if>
            <if test="age != null and age != ''">
                and age = #{age}
            </if>
            <if test="gender != null and gender != ''">
                and gender = #{gender}
            </if>
        </where>
    </select>
    <select id="getEmpByCondition02" resultType="Emp">
        select * from t_emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName != ''">
                emp_name = #{empName} and
            </if>
            <if test="age != null and age != ''">
                age = #{age} and
            </if>
            <if test="gender != null and gender != ''">
                gender = #{gender}
            </if>
        </trim>
    </select>
    <select id="getEmpByCondition03" resultType="Emp">
        select * from t_emp
        <where>
            <choose>
                <when test="empName != null and empName != ''">
                    emp_name = #{empName}
                </when>
                <when test="age != null and age != ''">
                    age = #{age}
                </when>
                <when test="gender != null and gender != ''">
                    gender = #{gender}
                </when>
            </choose>
        </where>
    </select>

    <!--
        foreach标签(常用)
        collection：循环的数组或集合
        item：数组或集合中的每一项数据
        separator：循环数据之间的分隔符
        open/close：循环数据以什么开始/结束
    -->
    <!-- void insertBatch(@Param("emps") List<Emp> emps); -->
    <insert id="insertBatch">
        <!-- insert into t_emp values (null,?,?,?,null) , (null,?,?,?,null) , (null,?,?,?,null) -->
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </insert>

    <!-- void deleteBatch(@Param("empIds") Integer[] empIds); -->
    <delete id="deleteBatch">
        <!-- 方式一：delete from t_emp where emp_id in ( ? , ? , ? ) -->
        delete from t_emp where emp_id in
        <foreach collection="empIds" item="empId" separator="," open="(" close=")">
            #{empId}
        </foreach>
    </delete>
    <delete id="deleteBatch01">
        <!-- 方式二：delete from t_emp where emp_id = ? or emp_id = ? or emp_id = ? -->
        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id = #{empId}
        </foreach>
    </delete>
</mapper>