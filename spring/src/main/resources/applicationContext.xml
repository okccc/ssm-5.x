<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--
        IOC(Inverse Of Control)：控制反转,把创建对象和对象之间相互调用的过程都交给Spring管理,降低耦合度
        IOC底层原理: 工厂模式 + xml解析 + 反射,相当于工厂模式的升级版
        IOC思想基于IOC容器完成,IOC容器就是对象工厂,Spring提供了两种实现方式
        BeanFactory：Spring内部接口,不提供给开发人员使用,加载配置文件时不会创建对象,获取对象时才会创建对象
        ApplicationContext：是其子接口,提供更多功能给开发人员使用,加载配置文件时就创建好配置的所有bean对象,耗时操作在项目启动时就完成
        ApplicationContext ioc = new ClassPathXmlApplicationContext("applicationContext.xml");
        Demo demo = ioc.getBean(Demo.class);
        反射是调用类的无参构造创建对象,所以bean只能是类类型不能是接口类型,类默认提供无参构造,如果自定义有参构造则不再提供无参构造
        Class<?> clazz = Class.forName("com.okccc.spring.pojo.Demo");
        Object o = clazz.newInstance();
        DI(Dependency Injection)：依赖注入,IOC思想的具体实现,组件以预先定义好的方式接受容器的资源注入,比如setter方法和有参构造
    -->
    <bean id="demo" class="com.okccc.spring.pojo.Demo"/>

    <!-- 配置bean对象并通过setter方法赋值(推荐) -->
    <bean id="emp01" class="com.okccc.spring.pojo.Emp">
        <!-- 点击属性名就会发现是调用setXxx() -->
        <property name="empId" value="1"/>
        <!-- 特殊符号&lt;&gt;或者直接使用CDATA区表示 -->
        <!--        <property name="name" value="a &lt; b"/>-->
        <property name="empName">
            <value><![CDATA[a < b]]></value>
        </property>
        <property name="age" value="19"/>
        <!-- null值是通过标签表示而不是字符串 -->
        <property name="sex">
            <null/>
        </property>
        <!-- 为类类型属性赋值 -->
        <!-- 方式一：引用外部bean -->
        <!--        <property name="dept" ref="dept01"/>-->
        <!-- 方式二：添加内部bean,内部bean只能用于属性赋值,无法在外部通过IOC容器获取,所以id属性可以省略 -->
        <property name="dept">
            <bean class="com.okccc.spring.pojo.Dept">
                <property name="deptId" value="1"/>
                <property name="deptName" value="销售部"/>
            </bean>
        </property>
        <!-- 为数组类型属性赋值 -->
        <property name="hobbies">
            <array>
                <value>抽烟</value>
                <value>喝酒</value>
                <value>烫头</value>
            </array>
        </property>
        <!-- 为Map集合类型属性赋值 -->
        <!-- 方式一：引用外部bean -->
        <!--        <property name="games" ref="gameList"/>-->
        <!-- 方式二：添加map标签 -->
        <property name="games">
            <map>
                <entry key="1" value-ref="game01"/>
                <entry key="2" value-ref="game02"/>
            </map>
        </property>
    </bean>

    <bean id="dept01" class="com.okccc.spring.pojo.Dept">
        <property name="deptId" value="1"/>
        <property name="deptName" value="技术部"/>
        <!-- 为List集合类型属性赋值 -->
        <!-- 方式一：引用外部bean -->
        <property name="emps" ref="empList"/>
        <!-- 方式二：添加list标签 -->
        <!--        <property name="emps">-->
        <!--            <list>-->
        <!--                <ref bean="emp01"/>-->
        <!--                <ref bean="emp02"/>-->
        <!--            </list>-->
        <!--        </property>-->
    </bean>

    <bean id="game01" class="com.okccc.spring.pojo.Game">
        <property name="gameId" value="1"/>
        <property name="gameName" value="WAR3"/>
    </bean>

    <bean id="game02" class="com.okccc.spring.pojo.Game">
        <property name="gameId" value="2"/>
        <property name="gameName" value="LOL"/>
    </bean>

    <!-- list集合类型的bean -->
    <util:list id="empList">
        <ref bean="emp01"/>
        <ref bean="emp02"/>
    </util:list>

    <!-- map集合类型的bean -->
    <util:map id="gameList">
        <entry key="1" value-ref="game01"/>
        <entry key="2" value-ref="game02"/>
    </util:map>

    <!-- 配置bean对象并通过构造器赋值 -->
    <bean id="emp02" class="com.okccc.spring.pojo.Emp">
        <constructor-arg name="id" value="2"/>
        <constructor-arg name="name" value="moon"/>
        <constructor-arg name="age" value="20"/>
        <constructor-arg name="sex" value="女"/>
    </bean>

    <!-- 使用p命名空间,p:empId表示字面量类型,p:empId-ref表示类类型 -->
    <bean id="emp03" class="com.okccc.spring.pojo.Emp"
          p:empId="3" p:empName="sky" p:dept-ref="dept01" p:games-ref="gameList"/>

    <!--
        bean的作用域
        scope="singleton"：bean在IOC容器中只有一个实例,IOC容器初始化时就创建好对象(默认)
        scope="prototype"：bean在IOC容器中可以有多个实例,因为每个实例都不一样,所以调用getBean()时才会创建对象使用

        bean的生命周期
        1.实例化：反射会调用类的无参构造创建bean对象
        2.依赖注入：property标签给bean对象的属性赋值
        3.初始化：bean对象初始化,init-method属性指定
        4.销毁：destroy-method属性指定,IOC容器关闭时才会销毁
        如果scope="singleton",生命周期的前三个步骤是在获取IOC容器时执行
        如果scope="prototype",生命周期的前三个步骤是在获取bean对象时执行,并且此时bean对象销毁不由IOC容器控制
    -->
    <bean id="user" class="com.okccc.spring.pojo.User" scope="prototype"
          init-method="initMethod" destroy-method="destroyMethod">
        <property name="id" value="1"/>
        <property name="username" value="grubby"/>
        <property name="password" value="orc"/>
        <property name="age" value="19"/>
    </bean>

    <!-- bean的后置处理器会在生命周期初始化前后添加额外操作,并且是针对IOC容器中的所有bean -->
    <!--    <bean id="beanPost" class="com.okccc.spring.process.MyBeanPostProcessor"/>-->

    <!--
        FactoryBean是Spring提供的一种整合第三方框架的常用机制,可以隐藏复杂组件的创建过程
        将FactoryBean接口的实现类配置成bean对象,会将其getObject()方法返回的对象交给IOC容器管理
        Spring整合Mybatis就是通过FactoryBean机制来创建SqlSessionFactory对象
     -->
    <bean id="userFactoryBean" class="com.okccc.spring.factory.UserFactoryBean"/>

    <!--
        基于xml的自动装配：自动为bean中的类类型或接口类型的属性赋值
        autowire="default"：不装配,使用属性的默认值,直接报错NullPointerException
        autowire="byType"：根据要赋值属性的类型在IOC容器中匹配某个bean,容器中只能有一个匹配的类型
        autowire="byName"：根据要赋值属性的名字作为bean的id在IOC容器中匹配,容器中可以有多个匹配的类型
    -->
<!--    <bean id="userController" class="com.okccc.spring.controller.UserController" autowire="byType"/>-->
<!--    <bean id="userService" class="com.okccc.spring.service.impl.UserServiceImpl" autowire="byName"/>-->
<!--    <bean id="userDao" class="com.okccc.spring.dao.impl.UserDaoImpl"/>-->

    <!--
        基于注解管理bean
        注解：给类、属性、方法、构造器添加标记,@Component普通类、@Controller控制层、@Service业务层、@Repository持久层
        扫描：Spring会扫描包下添加注解的类将其作为组件进行管理,IOC容器会自动配置该类的bean,id默认是类的小驼峰,也可以自定义但没必要
        由于bean的class只能是类类型,所以是给UserServiceImpl/UserDaoImpl添加注解而不是UserService/UserDao
        生产环境是基于xml和基于注解混合使用,因为第三方jar包提供的类是只读的无法添加注解
        SpringMVC扫描控制层,Spring扫描其它层,所以需要分开防止重复扫描
        context:exclude-filter：排除扫描,搭配use-default-filters="true"(包下所有类都要扫描)
        context:include-filter：包含扫描,搭配use-default-filters="false"(包下所有类都不扫描)

        基于注解的自动装配(推荐)
        @Autowired通常标记在成员变量上,此时就不需要setter方法赋值了,比xml自动装配更精简,也可以标记在有参构造或setter方法但没必要
        @Autowired原理
        a.默认通过byType方式进行自动装配,根据类型获取bean(常用,一般相同类型的bean只有一个,不会出现下面几种情况)
        b.如果有多个类型匹配的bean,就自动转换成byName方式,根据id和类型获取bean(很少用)
        c.如果有多个类型匹配的bean,且这些bean的id和属性名都不一致,就要给该属性添加@Qualifier注解指定某个bean的id(很少用)
        d.如果没有类型匹配的bean则抛异常NoSuchBeanDefinitionException,因为@Autowired(request=true)要求必须完成自动装配(很少用)
    -->
    <!-- 开启组件扫描 -->
    <context:component-scan base-package="com.okccc.spring">
<!--        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>-->
<!--        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    </context:component-scan>
    <!-- 设置干扰选项验证@Autowired原理 -->
    <bean id="service" class="com.okccc.spring.service.impl.UserServiceImpl"/>
    <bean id="userService" class="com.okccc.spring.service.impl.UserServiceImpl"/>

    <!--
        OOP(Object Oriented Programming)：面向对象编程,纵向继承机制
        AOP(Aspect Oriented Programming)：面向切面编程,横向抽取机制,是OOP的补充和完善,底层是动态代理,不修改源代码动态增强功能
        AOP注意事项：
        1.切面类和目标类都要交给IOC容器管理,手动配置bean对象或者使用注解+扫描(推荐)
        2.切面类必须添加@Aspect注解标识,Aspect是AOP思想的具体实现
    -->
    <!-- 基于注解的AOP(推荐) -->
    <aop:aspectj-autoproxy/>

    <!-- 基于xml的AOP(了解) -->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 设置公共切入点表达式 &ndash;&gt;-->
<!--        <aop:pointcut id="pointCut" expression="execution(* com.okccc.spring.aop.*.*(..))"/>-->
<!--        &lt;!&ndash; 将IOC容器中的某个bean设置为切面 &ndash;&gt;-->
<!--        <aop:aspect ref="loggerAspectByXml">-->
<!--            <aop:before method="beforeAdvice" pointcut-ref="pointCut"/>-->
<!--            <aop:after-returning method="afterReturningAdvice" pointcut-ref="pointCut" returning="result"/>-->
<!--            <aop:after-throwing method="afterThrowingAdvice" pointcut-ref="pointCut" throwing="e"/>-->
<!--            <aop:after method="afterAdvice" pointcut-ref="pointCut"/>-->
<!--            <aop:around method="aroundAdvice" pointcut-ref="pointCut"/>-->
<!--        </aop:aspect>-->
<!--        <aop:aspect ref="validateAspect" order="1">-->
<!--            <aop:before method="beforeAdvice" pointcut-ref="pointCut"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

    <!-- 引入外部属性文件 -->
    <context:property-placeholder location="jdbc.properties"/>
    <!-- 配置数据源 -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!-- 配置JdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>

    <!--
       编程式事务：所有操作都需要硬编码实现,且没法复用
        Connection conn = ...;
        try {
            // 关闭自动提交事务
            conn.setAutoCommit(false);
            // 业务操作
            ...
            // 手动提交事务
            conn.commit();
        } catch (Exception e) {
            // 回滚事务
            conn.rollBack();
        } finally {
            // 释放连接
            conn.close();
        }
        声明式事务：事务控制的代码结构基本确定,可以将其抽取封装,框架通过配置来实现功能,提高开发效率,消除冗余代码
    -->
    <!-- 配置事务管理器,相当于切面 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>

    <!-- 基于注解的声明式事务(推荐) -->
    <!-- 开启事务的注解驱动,相当于通知,添加@Transactional注解的方法或类中所有方法都会被事务管理,通常是在处理业务逻辑的Service层 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 基于xml的声明式事务(了解) -->
<!--    &lt;!&ndash; 配置事务通知 &ndash;&gt;-->
<!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
<!--        <tx:attributes>-->
<!--            <tx:method name="*"/>-->
<!--            <tx:method name="checkout"/>-->
<!--            <tx:method name="buyBook" no-rollback-for="java.lang.ArithmeticException" propagation="REQUIRES_NEW"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->
<!--    &lt;!&ndash; 配置切面的通知和切入点表达式 &ndash;&gt;-->
<!--    <aop:config>-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.okccc.spring.service.impl.*.*(..))"/>-->
<!--    </aop:config>-->
</beans>