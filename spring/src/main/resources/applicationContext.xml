<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
        IOC(Inverse Of Control)：控制反转,把创建对象和对象之间相互调用的过程都交给Spring管理,降低耦合度
        IOC底层原理: 工厂模式 + xml解析 + 反射,相当于工厂模式的升级版
        IOC思想基于IOC容器完成,IOC容器就是对象工厂,Spring提供了两种实现方式
        BeanFactory：Spring内部使用接口,不提供给开发人员使用,加载配置文件时不会创建对象,获取对象时才会创建对象
        ApplicationContext：BeanFactory接口的子接口,提供更多功能给开发人员使用,加载配置文件时就会创建对象,耗时操作在项目启动时就完成
        ApplicationContext ioc = new ClassPathXmlApplicationContext("applicationContext.xml");
        Demo demo = ioc.getBean(Demo.class);
        反射是调用类的无参构造创建对象,所以bean只能是类类型不能是接口类型
        Class<?> clazz = Class.forName("com.okccc.spring.pojo.Demo");
        Object o = clazz.newInstance();
        DI(Dependency Injection)：依赖注入,IOC思想的一种具体实现,组件以预先定义好的方式接受容器的资源注入,比如setter方法和有参构造
    -->
    <bean id="demo" class="com.okccc.spring.pojo.Demo"/>

    <!-- 配置bean对象并给属性赋值(常用) -->
    <bean id="emp01" class="com.okccc.spring.pojo.Emp">
        <!-- 点击属性名就会发现是通过Setter方法给对象赋值 -->
        <property name="empId" value="1"/>
        <!-- 特殊符号&lt;&gt;或者直接使用CDATA区表示 -->
        <!--        <property name="name" value="a &lt; b"/>-->
        <property name="empName">
            <value><![CDATA[a < b]]></value>
        </property>
        <property name="age" value="19"/>
        <!-- null值是通过标签表示而不是字符串 -->
        <property name="sex">
            <null/>
        </property>
    </bean>

    <!-- 配置bean对象并通过构造器赋值 -->
    <bean id="emp02" class="com.okccc.spring.pojo.Emp">
        <constructor-arg name="id" value="2"/>
        <constructor-arg name="name" value="moon"/>
        <constructor-arg name="age" value="20"/>
        <constructor-arg name="sex" value="女"/>
    </bean>
</beans>